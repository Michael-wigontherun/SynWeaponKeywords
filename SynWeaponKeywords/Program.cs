using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;

using Noggog;

using WeaponKeywords.Types;
namespace WeaponKeywords
{
    public class Program
    {
        static Lazy<Database> LazyDB = new();
        static Database DB => LazyDB.Value;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .SetAutogeneratedSettings("Database", "database.json", out LazyDB)
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SynWeaponKeywords.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Dictionary<string, List<IKeywordGetter>> formkeys = new();
            var Keywords = DB.DB.SelectMany(x => x.Value.keyword).Distinct();
            foreach (var src in DB.sources)
            {
                if (!state.LoadOrder.PriorityOrder.Select(x => x.ModKey).Contains(src)) continue;
                state.LoadOrder.TryGetValue(src, out var mod);
                if (mod != null && mod.Mod != null && mod.Mod.Keywords != null)
                {
                    var keywords = mod.Mod.Keywords
                        .Where(x => Keywords.Contains(x.EditorID ?? ""))
                        .ToList() ?? new List<IKeywordGetter>();

                    foreach (var keyword in keywords)
                    {
                        if (keyword == null) continue;
                        var type = DB.DB.Where(x => x.Value.keyword.Contains(keyword.EditorID ?? "")).Select(x => x.Key);
                        Console.WriteLine($"Keyword : {keyword.FormKey.ModKey} : {keyword.EditorID}");
                        foreach (var tp in type)
                        {
                            if (!formkeys.ContainsKey(tp))
                            {
                                formkeys[tp] = new List<IKeywordGetter>();
                            }
                            formkeys[tp].Add(keyword);
                        }
                    }
                }
            }
            state.LoadOrder.PriorityOrder.Weapon().WinningOverrides().ForEach(weapon =>
            {
                var edid = weapon.EditorID;
                var nameToTest = weapon.Name?.String?.ToLower();
                var matchingKeywords = DB.DB
                    .Where(kv => kv.Value.commonNames.Any(cn => nameToTest?.ContainsInsensitive(cn) ?? false))
                    .Where(kv => !kv.Value.excludeEditID.Contains(edid ?? ""))
                    .Select(kv => kv.Key)
                    .ToArray();
                var globalExclude = DB.excludes.phrases
                    .Any(ph => nameToTest?.ContainsInsensitive(ph) ?? false) ||
                    DB.excludes.weapons.Contains(edid ?? "");
                var isOneHanded = weapon.Data.AnimationType is WeaponAnimationType.OneHandSword or WeaponAnimationType.HandToHand or WeaponAnimationType.OneHandDagger or WeaponAnimationType.OneHandAxe or WeaponAnimationType.OneHandAxe or WeaponAnimationType.OneHandMace or WeaponAnimationType.Staff;
                IWeapon? nw = null;
                if (DB.includes.ContainsKey(edid ?? ""))
                {
                    if (formkeys.ContainsKey(DB.includes[edid ?? ""]))
                    {
                        Console.WriteLine($"{edid} - {nameToTest} - {weapon.FormKey.ModKey}\n\t{weapon.Name}: {weapon.EditorID} is {DB.DB[DB.includes[edid ?? ""]].outputDescription}:");
                        foreach (var keyform in formkeys[DB.includes[edid ?? ""]])
                        {
                            if (!weapon.Keywords?.Select(x => x.FormKey.ModKey).Contains(keyform.FormKey.ModKey) ?? false)
                            {
                                nw = nw == null ? state.PatchMod.Weapons.GetOrAddAsOverride(weapon)! : nw!;
                                nw.Keywords?.Add(keyform);
                                Console.WriteLine($"\t\tAdded Keyword {keyform.EditorID} from {keyform.FormKey.ModKey}");
                            }
                        }
                        if (weapon.Data != null)
                        {
                            if (!DB.DB[DB.includes[edid ?? ""]].IgnoreWATOverrides.Contains(weapon.FormKey.ModKey))
                            {
                                if (isOneHanded)
                                {
                                    if (DB.DB[DB.includes[edid ?? ""]].OneHandedAnimation != weapon.Data.AnimationType)
                                    {
                                        nw = nw == null ? state.PatchMod.Weapons.GetOrAddAsOverride(weapon)! : nw!;
                                        nw.Data!.AnimationType = DB.DB[DB.includes[edid ?? ""]].OneHandedAnimation;
                                        Console.WriteLine($"\t\tChanged Animation Type to {DB.DB[DB.includes[edid ?? ""]].OneHandedAnimation}");
                                    }
                                }
                                else
                                {
                                    if (DB.DB[DB.includes[edid ?? ""]].TwoHandedAnimation != weapon.Data.AnimationType)
                                    {
                                        nw = nw == null ? state.PatchMod.Weapons.GetOrAddAsOverride(weapon)! : nw!;
                                        nw.Data!.AnimationType = DB.DB[DB.includes[edid ?? ""]].TwoHandedAnimation;
                                        Console.WriteLine($"\t\tChanged Animation Type to {DB.DB[DB.includes[edid ?? ""]].TwoHandedAnimation}");
                                    }
                                }
                            }
                        }
                    }
                }
                if (matchingKeywords.Length > 0 && !globalExclude)
                {
                    Console.WriteLine($"{edid} - {nameToTest} - {weapon.FormKey.ModKey}:\n\tMatching Keywords: {string.Join(",", matchingKeywords)}");
                    foreach (var kyd in matchingKeywords)
                    {
                        if (formkeys.ContainsKey(kyd) && !DB.DB[kyd].exclude.Any(cn => nameToTest?.ContainsInsensitive(cn) ?? false))
                        {
                            Console.WriteLine($"\t{weapon.Name}: {weapon.EditorID} from {weapon.FormKey.ModKey} is {DB.DB[kyd].outputDescription}:");
                            foreach (var keyform in formkeys[kyd])
                            {
                                if (DB.DB[kyd].excludeSource.Contains(keyform.FormKey.ModKey)) continue;
                                if (!weapon.Keywords?.Select(x => x.FormKey.ModKey).Contains(keyform.FormKey.ModKey) ?? false)
                                {
                                    nw = nw == null ? state.PatchMod.Weapons.GetOrAddAsOverride(weapon)! : nw!;
                                    nw.Keywords?.Add(keyform);
                                    Console.WriteLine($"\t\tAdded keyword {keyform.EditorID} from {keyform.FormKey.ModKey}");
                                }
                            }
                        }
                    }
                    if (weapon.Data != null)
                    {
                        var fKeyword = matchingKeywords.First();
                        if (!DB.DB[fKeyword].IgnoreWATOverrides.Contains(weapon.FormKey.ModKey))
                        {
                            if (isOneHanded)
                            {
                                if (DB.DB[fKeyword].OneHandedAnimation != weapon.Data.AnimationType)
                                {
                                    nw = nw == null ? state.PatchMod.Weapons.GetOrAddAsOverride(weapon)! : nw!;
                                    nw.Data!.AnimationType = DB.DB[fKeyword].OneHandedAnimation;
                                    Console.WriteLine($"\t\tChanged Animation Type to {DB.DB[fKeyword].OneHandedAnimation}");
                                }
                            }
                            else
                            {
                                if (DB.DB[fKeyword].TwoHandedAnimation != weapon.Data.AnimationType)
                                {
                                    nw = nw == null ? state.PatchMod.Weapons.GetOrAddAsOverride(weapon)! : nw!;
                                    nw.Data!.AnimationType = DB.DB[fKeyword].TwoHandedAnimation;
                                    Console.WriteLine($"\t\tChanged Animation Type to {DB.DB[fKeyword].TwoHandedAnimation}");
                                }
                            }
                        }
                    }
                }
            });
        }
    }
}